setwd("C:/Users/hsian/Documents/GitHub/R") #****設定路徑
dataset <- read_csv("test_scores.csv")
install.packages("readr")
install.packages("MASS")
install.packages("BSDA")
install.packages("car")
library(BSDA)
library(BSDA)
library(MASS)
install.packages("MASS")
install.packages("MASS")
library(MASS)
library(readr)
library(dplyr)
library(ggplot2)
library(car)
setwd("C:/Users/hsian/Documents/GitHub/R") #****設定路徑
dataset <- read_csv("test_scores.csv")
str(dataset)
head(dataset) #查看前6筆資料
set.seed(123)
data_s1 <- dataset[sample(1:nrow(dataset), 200), ]  # Sample rows of data with Base R
dataset2 <- read_csv("student-mat.csv")
dataset2
#1.
ggplot(dataset2) + geom_boxplot(aes(x=as.factor(health), y=G3))
#2.
#常態性檢定
shapiro.test(dataset2$G3)
#W = 0.92873, p-value = 8.836e-13
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(sqrt(dataset2$G3))
#W = 0.73314, p-value < 2.2e-16
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(log(dataset2$G3))
#there's 0,so W = NaN.
#假設他成常態
#變異數同質檢定
leveneTest(G3 ~ as.factor(Medu), data = dataset2)
#F = 0.2701,P-value = 0.8972
#P-value>0.05, not reject H0
#(their variance are the same. )
#H0:不同母親教育程度的G3成績相等
#H1:至少有兩種母親教育程度的G3成績不相等
res4 <- aov(dataset2$G3 ~ as.factor(dataset2$Medu))
summary(res4)
#3.
#post test
TukeyHSD(res4, conf.level=.95)
plot(TukeyHSD(res4, conf.level=.95), las = 2)
#2.
#常態性檢定
shapiro.test(dataset2$G3)
#W = 0.92873, p-value = 8.836e-13
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(sqrt(dataset2$G3))
#W = 0.73314, p-value < 2.2e-16
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(log(dataset2$G3))
#there's 0,so W = NaN.
#假設他成常態
#變異數同質檢定
leveneTest(G3 ~ as.factor(Medu), data = dataset2)
#F = 0.2701,P-value = 0.8972
#P-value>0.05, not reject H0
#(their variance are the same. )
#H0:不同母親教育程度的G3成績相等
#H1:至少有兩種母親教育程度的G3成績不相等
res4 <- aov(dataset2$G3 ~ as.factor(dataset2$Medu))
summary(res4)
#3.
#post test
TukeyHSD(res4, conf.level=.95)
plot(TukeyHSD(res4, conf.level=.95), las = 2)
#2.
#常態性檢定
shapiro.test(dataset2$G3)
#W = 0.92873, p-value = 8.836e-13
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(sqrt(dataset2$G3))
#W = 0.73314, p-value < 2.2e-16
#p-value<0.05,reject H0(it's not normal distribution)
shapiro.test(log(dataset2$G3))
#there's 0,so W = NaN.
#假設他成常態
#變異數同質檢定
leveneTest(G3 ~ as.factor(Medu), data = dataset2)
#F = 0.2701,P-value = 0.8972
#P-value>0.05, not reject H0
#(their variance are the same. )
#H0:不同母親教育程度的G3成績相等
#H1:至少有兩種母親教育程度的G3成績不相等
res4 <- aov(dataset2$G3 ~ as.factor(dataset2$Medu))
summary(res4)
# loading the dataset
#可使用getwd()來看目前的工作目錄
#或是點選上方選項的Tools->Global options來看目前工作目錄
data <- read.csv("DiamondsPrices.csv")
View(data)
# loading the dataset
#可使用getwd()來看目前的工作目錄
#或是點選上方選項的Tools->Global options來看目前工作目錄
getwd()
view(data)
#install & library dplyr
install.packages("dplyr")
library(dplyr)
library(dplyr)
#install & library dplyr
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
#select()
carat_and_price_data <- data %>% select(carat,price) %>% head(5)
carat_and_price_data
# loading the dataset
#可使用getwd():(在console輸入)來看目前的工作目錄
#或是點選上方選項的Tools->Global options來看目前工作目錄
data <- read.csv("DiamondsPrices.csv")
View(data)
#select()
#%>%: A且B
carat_and_price_data <- data %>% select(carat,price) %>% head(5)
carat_and_price_data
#filter()
Above_300_USD_diamond <- data %>% filter(price>300) %>% head(5)
Above_300_USD_diamond
## List the diamond that its cut is "Premium" and show its clarity
data %>%filter(cut=="Premium") %>% select(clarity)
## List the diamond that its cut is "Premium" and show its clarity
data %>%filter(cut=="Premium") %>% select(cut, clarity)
## List the diamond that its cut is "Premium" and show its clarity
data %>%filter(cut=="Premium") %>% select(cut, clarity) %>% head(5)
#mutate()
sumofxyz_data <- data %>% mutate(sumofxyz = x+y+z) %>% select(sumofxyz, price) %>% head(5)
sumofxyz_data
#arrange()
desc_list_the_carat_and_price <- carat_and_price_data %>% arrange(desc(price)) %>% head(5)
desc_list_the_carat_and_price
#summarise()
data %>% summarise(avgprice = mean(price), 顆=n())
#group_by()
data %>% group_by(color) %>% summarise(avgprice = mean(price), 顆=n())
## Add a new column which is calculated by the price divided by table
## and classifying the data depends on its clarity
## and summarise the average of the new column(the price divided by table) with descending order
data %>% mutate(price_devided_by_table=price/table) %>% group_by(clarity) %>% summarise(avgprice_table=mean(price_devided_by_table))%>% arrange(desc(avgprice_table)) %>% head(5)
## Add a new column which is calculated by the price divided by table
## and classifying the data depends on its clarity
## and summarise the average of the new column(the price divided by table) with descending order
data %>% mutate(price_devided_by_table=price/table) %>% group_by(clarity) %>% summarise(avgprice_table=mean(price_devided_by_table))%>% arrange(desc(avgprice_table))
## Find the diamond that its price is above 500 USD
## and list the cut and price with the ascending order
data %>% filter(price>500) %>% select(cut, price) %>% arrange()
## Find the diamond that its price is above 500 USD
## and list the cut and price with the ascending order
data %>% filter(price>500) %>% select(cut, price) %>% arrange(desc(price)) %>% head(5)
## Add a new column which is calculated by the price divided by table
## and classifying the data depends on its clarity
## and summarise the average of the new column(the price divided by table) with descending order
pri_div_tab <- data %>% mutate(price_devided_by_table=price/table) %>% group_by(clarity) %>% summarise(avgprice_table=mean(price_devided_by_table))%>% arrange(desc(avgprice_table))
pri_div_tab
## Find the diamond that its price is above 500 USD
## and list the cut and price with the ascending order
data %>% filter(price>500) %>% select(cut, price) %>% arrange(desc(price)) %>% head(5)
## Assumption: the file is the population
population <- read.csv("DiamondsPrices.csv")
## obtaining the sample & set seed based on the last two digit number from your student ID
set.seed(41)
mysample <- sample(population$price, 50)
mysample
## Find the mean of your sample
mean(mysample)
## If I want to repeat the above process 10,000 times and calculate its mean and the form a sampling distribution
#create a vector
dist_of_mean <- rep(0,10000)
for(i in 1:10000){
dist_of_mean[i] <- mean(sample(population$price, 50))
}
### creating a histogram of the distribution of the sample mean
hist(dist_of_mean,
main = "Sampling distribution of diamond",
xlab = "Price value of diamond",
col = "cadetblue")
# loading the dataset
#可使用getwd():(在console輸入)來看目前的工作目錄
#或是點選上方選項的Tools->Global options來看目前工作目錄
data <- read.csv("DiamondsPrices.csv")
#select()
#A %>% B: A且B
carat_and_price_data <- data %>% select(carat,price) %>% head(5)
carat_and_price_data
## Add a new column which is calculated by the price divided by table
## and classifying the data depends on its clarity
## and summarise the average of the new column(the price divided by table) with descending order
pri_div_tab <- data %>% mutate(price_devided_by_table=price/table) %>% group_by(clarity) %>% summarise(avgprice_table=mean(price_devided_by_table))%>% arrange(desc(avgprice_table))
pri_div_tab
## Find the diamond that its price is above 500 USD
## and list the cut and price with the ascending order
data %>% filter(price>500) %>% select(cut, price) %>% arrange(desc(price)) %>% head(5)
## Assumption: the file is the population
population <- read.csv("DiamondsPrices.csv")
## obtaining the sample & set seed based on the last two digit number from your student ID
set.seed(41)
mysample <- sample(population$price, 50)
mysample
## Find the mean of your sample
mean(mysample)
## If I want to repeat the above process 10,000 times and calculate its mean and the form a sampling distribution
#create a vector(初始化向量)
dist_of_mean <- rep(0,10000) # 10000個0
# 抽樣50個->計算平均->抽樣10000次
for(i in 1:10000){
dist_of_mean[i] <- mean(sample(population$price, 50))
}
### creating a histogram of the distribution of the sample mean
hist(dist_of_mean,
main = "Sampling distribution of diamond", #標題
xlab = "Price value of diamond",
col = "cadetblue") #圖表顏色
### let's see the distribution of the population
hist(population$price,
main = "Sampling distribution of diamond",
xlab = "Price value of diamond",
col = "cadetblue")
### creating a histogram of the distribution of the sample mean
hist(dist_of_mean,
main = "Sampling distribution of diamond", #標題
xlab = "Price value of diamond",
col = "cadetblue") #圖表顏色
### compare the population mean and the mean of the sampling distribution
print(mean(population$price))
print(mean(dist_of_mean))
### let's see the distribution of the population
hist(population$price,
main = "Sampling distribution of diamond",
xlab = "Price value of diamond",
col = "cadetblue")
### compare the population variance and the std of sampling distribution
print(var(population$price))
print(var(dist_of_mean))
### What the sampling distribution be if we increase the sample size to 100 ?
dist_of_mean_2 <- rep(0,10000)
for(i in 1:10000){
dist_of_mean_2[i] <- mean(sample(population$price, 100))
}
par(mfrow=c(1,2))
hist(dist_of_mean,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
hist(dist_of_mean_2,
main = "Sample size = 100",
xlab = "Price value of diamond",
col = "cadetblue")
par(mfrow=c(1,2))
hist(dist_of_mean,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
## If I want to repeat the above process 10,000 times and calculate its mean and the form a sampling distribution
#create a vector(初始化向量)
dist_of_mean <- rep(0,10000) # 10000個0
# 抽樣50個->計算平均->抽樣10000次
for(i in 1:10000){
dist_of_mean[i] <- mean(sample(population$price, 50))
}
### What the sampling distribution be if we increase the sample size to 100 ?
dist_of_mean_2 <- rep(0,10000)
for(i in 1:10000){
dist_of_mean_2[i] <- mean(sample(population$price, 100))
}
par(mfrow=c(1,2))
hist(dist_of_mean,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
hist(dist_of_mean_2,
main = "Sample size = 100",
xlab = "Price value of diamond",
col = "cadetblue")
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
library(dplyr)
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>% summarize(avgprice = mean(price), 顆=n()) %>%select(cut, clarity) %>% arrange(desc(avgprice))
q1 <- diamond %>% group_by(cut, clarity) %>% summarize(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>% summarize(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1 <- diamond %>% group_by(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1 <- diamond %>% .groups(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1 <- diamond %>% group_by(cut)%>% group_by(clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1 <- diamond %>% group_by(cut, clarity)%>% group_by(clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity)%>% group_by(clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1 <- diamond %>% group_by(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- data %>% filter(cut == "good", clarity== "VS1")
### Plot the population distribution (5%)
hist(population$price,
main = "Sampling distribution of diamond",
xlab = "Price value of diamond",
col = "cadetblue")
population
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- data %>% filter(cut == "good", clarity== "VS1")
population
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- read.csv("DiamondsPrices.csv")
q2 <-  population%>% filter(cut == "good", clarity== "VS1")
q2
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- read.csv("DiamondsPrices.csv")
q2 <-  population %>% filter(cut == "Good", clarity== "VS1")
q2
### Plot the population distribution (5%)
hist(population$price,
main = "Sampling distribution of diamond",
xlab = "Price value of diamond",
col = "cadetblue")
### Just like we did in the lecture
### We sampled from the population 10,000 times
### Please plot the sampling distribution with sample size n=50, n=250, n=500, respectively. (45%)
### Note that you need to put the three graphs together as we did it in the lecture
### and name the title to recognize what its sample size is.
s50 <- rep(0,10000) # 10000個0
s250 <- rep(0,10000)
s500 <- rep(0,10000)
# 抽樣50個->計算平均->抽樣10000次
for(i in 1:10000){
s50[i] <- mean(sample(q2$price, 50))
s250[i] <- mean(sample(q2$price, 250))
s500[i] <- mean(sample(q2$price, 500))
}
par(mfrow=c(1,3)) #一列三行
hist(s50,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
hist(s50,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
hist(s250,
main = "Sample size = 250",
xlab = "Price value of diamond",
col = "cadetblue")
hist(s500,
main = "Sample size = 500",
xlab = "Price value of diamond",
col = "cadetblue")
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- read.csv("DiamondsPrices.csv")
q2 <-  population %>% filter(cut == "Good", clarity== "VS1")
q2
### Just like we did in the lecture
### We sampled from the population 10,000 times
### Please plot the sampling distribution with sample size n=50, n=250, n=500, respectively. (45%)
### Note that you need to put the three graphs together as we did it in the lecture
### and name the title to recognize what its sample size is.
s50 <- rep(0,10000) # 10000個0
s250 <- rep(0,10000)
s500 <- rep(0,10000)
# 抽樣50個->計算平均->抽樣10000次
for(i in 1:10000){
s50[i] <- mean(sample(q2$price, 50))
s250[i] <- mean(sample(q2$price, 250))
s500[i] <- mean(sample(q2$price, 500))
}
par(mfrow=c(1,3)) #一列三行
hist(s50,
main = "Sample size = 50",
xlab = "Price value of diamond",
col = "cadetblue")
hist(s250,
main = "Sample size = 250",
xlab = "Price value of diamond",
col = "cadetblue")
hist(s500,
main = "Sample size = 500",
xlab = "Price value of diamond",
col = "cadetblue")
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>% summarise(avgprice = mean(price), 顆=n()) %>%select(cut, clarity, 顆, avgprice) %>% arrange(desc(avgprice))
q1
### Q1 50% ###
### Recall from the last semester's midterm 1 (If you still remember it, I guess not. )
### Please classifying the diamond depends on its cut and clarity
### and calculate the average price of each group
### Finally, only list the cut, clarity, the amounts diamonds of each group and average price with descending order
diamond <- read.csv("DiamondsPrices.csv")
q1 <- diamond %>% group_by(cut, clarity) %>%
summarise(avgprice = mean(price), 顆=n()) %>%
select(cut, clarity, 顆, avgprice) %>%
arrange(desc(avgprice))
q1
### Q2 50% ###
### Subset the data with the following condition:
### cut is good and clarity is VS1,
### and take it as the population
### then we are interest in its price
population <- read.csv("DiamondsPrices.csv")
q2 <-  population %>% filter(cut == "Good", clarity== "VS1")
q2
